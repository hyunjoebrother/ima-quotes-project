"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";

const Results: React.FC = () => {
  const [result, setResult] = useState<any>(null);
  const [genImg, setGenImage] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const fetchResults = async () => {
      setLoading(true);
      setError(null);

      const who = localStorage.getItem("quotes-who");
      const where = localStorage.getItem("quotes-where");
      const what = localStorage.getItem("quotes-what");

      if (!who || !where || !what) {
        router.push("/");
        return;
      }

      try {
        const response = await axios.post(
          "http://127.0.0.1:5001/ima-quotes-project/us-central1/generateSummaryAndQuote",
          { who, where, what }
        );
        setResult(response.data);

        // Use summary to generate image
        const summary = response.data.summary;
        if (summary) {
          const openaiResponse = await axios.post(
            "https://api.openai.com/v1/images/generations",
            {
              model: "dall-e-3",
              prompt: summary,
              n: 1,
              size: "1024x1024",
            },
            {
              headers: {
                Authorization: `Bearer ${process.env.NEXT_PUBLIC_OPENAI_API_KEY}`,
                "Content-Type": "application/json",
              },
            }
          );
          setGenImage(openaiResponse.data.data[0].url);
        }
      } catch (error) {
        console.error("Error fetching results:", error);
        setError("결과를 불러오는 데 문제가 발생했습니다.");
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, [router]);

  const handleBackToMain = () => {
    localStorage.removeItem("quotes-who");
    localStorage.removeItem("quotes-where");
    localStorage.removeItem("quotes-what");
    router.push("/");
  };

  return (
    <section className="w-full h-screen flex flex-col items-center">
      <div className="w-full min-h-[36vh] sm:min-h-[40vh] tb:min-h-[48vh] lg:min-h-[56vh] bg-quotesBg bg-no-repeat bg-cover bg-center lg:px-12 tb:px-10 px-8 2xs:px-6 mb-1 lg:pt-16 tb:pt-14 sm:pt-12 pt-8 text-black">
        <h3 className="font-bold 2xs:text-xl xs:text-xl 2sm:text-xl text-xl tb:text-2xl lg:text-3xl">
          당신에게 어울리는
        </h3>

        <p className="mt-4 2xs:text-xs xs:text-xs text-sm tb:text-base lg:text-base font-medium">
          명언과 장면을 알려드릴게요
        </p>
      </div>
      <div className="w-full h-full pt-1">
        <div className="w-full 2xs:py-6 xs:py-6 2sm:py-6 py-10 px-8 mb-2 bg-white">
          {loading && <p>결과를 불러오는 중...</p>}
          {error && <p>{error}</p>}
          {/* {result && !loading && !error && ( */}
          {result && (
            <>
              <h3 className="text-lg font-bold">결과</h3>
              {genImg && (
                <div>
                  <h3>생성된 이미지</h3>
                  <img src={genImg} alt="Generated by OpenAI" />
                </div>
              )}
              <p>요약: {result.summary}</p>
              <p>명언: {result.quote}</p>
              <p>내용: {result.info}</p>
              <button
                onClick={handleBackToMain}
                className="flex w-28 h-10 bg-slate-700 rounded-lg text-white text-base font-medium text-center items-center justify-center"
              >
                메인으로 이동
              </button>
            </>
          )}
        </div>
      </div>
    </section>
  );
};

export default Results;
